#!/bin/bash
set -euo pipefail

SCRIPT_PATH="$(cd "$(dirname "$0")"; pwd -P)"

CHARTS_PATH="$SCRIPT_PATH/charts"
RELEASES_PATH="$SCRIPT_PATH/releases"

usage() {
  echo "usage: $0 action release"
  echo -e "\taction: (list|status|install|history)"
  exit 1
}

check_release_arg() {
  if [[ $# -lt 1 ]]; then
    echo "error: Missing release name"
    exit 1
  fi
}

if [[ $# -lt 1 ]]; then
  usage
fi

ACTION=$1
RELEASE=$2

execute_list() {
  helm list --all-namespaces
}

execute_status() {
  helm status $RELEASE -n $RELEASE
}

execute_history() {
  helm history $RELEASE -n $RELEASE
}

execute_install() {
  CHART_DIR="$CHARTS_PATH/$RELEASE"
  RELEASE_DIR="$RELEASES_PATH/$RELEASE"

  PRE_INSTALL_DIR=$RELEASE_DIR/pre-install
  INSTALL_DIR=$RELEASE_DIR/install
  POST_INSTALL_DIR=$RELEASE_DIR/post-install

  # Apply pre install manifests if needed
  if [ -d "$PRE_INSTALL_DIR" ]; then
    kubectl apply -R -f $PRE_INSTALL_DIR
  fi

  # Install chart if values.yml is found
  if [ -f "$RELEASE_DIR/values.yml" ]; then
    VALUES_ARGS="--values $RELEASE_DIR/values.yml"
    if [ -f "$RELEASE_DIR/secrets.yml" ]; then
      VALUES_ARGS="$VALUES_ARGS --values $RELEASE_DIR/secrets.yml"
    fi

    NAMESPACE=$RELEASE
    if [ -f "$RELEASE_DIR/NAMESPACE" ]; then
      NAMESPACE=`cat -e "$RELEASE_DIR/NAMESPACE"`
    fi

    set -x

    helm upgrade \
      --create-namespace \
      --install $RELEASE \
      --namespace $NAMESPACE \
      $VALUES_ARGS \
      $CHART_DIR

    set +x

  else
    kubectl apply -R -f $INSTALL_DIR
  fi

  # Apply post install manifests if needed
  if [ -d "$POST_INSTALL_DIR" ]; then
    kubectl apply -R -f $POST_INSTALL_DIR
  fi
}

case $ACTION in
    list)
        echo "Listing installed releases..."
        execute_list
        ;;
    status)
        check_release_arg $RELEASE
        echo "Showing status of release $RELEASE..."
        execute_status
        ;;
    install)
        check_release_arg $RELEASE
        echo "Installing release $RELEASE..."
        execute_install
        ;;
    history)
        check_release_arg $RELEASE
        echo "Showing history of release $RELEASE..."
        execute_history
        ;;
    *)
        echo "Unknown action, aborting..."
        usage
        ;;
esac
